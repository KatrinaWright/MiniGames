"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configs = exports.rules = void 0;
var rules_1 = require("./rules");
Object.defineProperty(exports, "rules", { enumerable: true, get: function () { return rules_1.rules; } });
var restrictedSyntaxBase = [
    {
        selector: "TryStatement",
        message: "Try/catch might prevent Rune from working properly.",
    },
    {
        selector: "ThisExpression,WithStatement",
        message: "This references might prevent Rune from working properly.",
    },
    {
        selector: "AwaitExpression,ArrowFunctionExpression[async=true],FunctionExpression[async=true],FunctionDeclaration[async=true],YieldExpression",
        message: "Rune logic must be synchronous.",
    },
    {
        selector: "RegExpLiteral",
        message: "Regular expressions are stateful and might prevent Rune from working properly.",
    },
];
var logicConfig = {
    plugins: ["rune"],
    parserOptions: {
        ecmaVersion: 2021,
    },
    globals: {
        // See https://github.com/eslint/eslint/tree/main/conf/globals.js
        // commonjs
        exports: "off",
        global: "off",
        module: "off",
        require: "off",
        // es3
        Array: "readonly",
        Boolean: "readonly",
        // @ts-expect-error JS built-in method conflict
        constructor: "off",
        Date: "off",
        decodeURI: "off",
        decodeURIComponent: "off",
        encodeURI: "off",
        encodeURIComponent: "off",
        Error: "readonly",
        escape: "off",
        eval: "off",
        EvalError: "off",
        Function: "off",
        // @ts-expect-error JS built-in method conflict
        hasOwnProperty: "readonly",
        Infinity: "readonly",
        isFinite: "readonly",
        isNaN: "readonly",
        // @ts-expect-error JS built-in method conflict
        isPrototypeOf: "readonly",
        Math: "readonly",
        NaN: "readonly",
        Number: "readonly",
        Object: "readonly",
        parseFloat: "readonly",
        parseInt: "readonly",
        // @ts-expect-error JS built-in method conflict
        propertyIsEnumerable: "readonly",
        RangeError: "readonly",
        ReferenceError: "readonly",
        RegExp: "off",
        String: "readonly",
        SyntaxError: "readonly",
        // @ts-expect-error JS built-in method conflict
        toLocaleString: "off",
        // @ts-expect-error JS built-in method conflict
        toString: "readonly",
        TypeError: "readonly",
        undefined: "readonly",
        unescape: "off",
        URIError: "readonly",
        // @ts-expect-error JS built-in method conflict
        valueOf: "readonly",
        // es5
        JSON: "readonly",
        // es2015
        ArrayBuffer: "off",
        DataView: "off",
        Float32Array: "off",
        Float64Array: "off",
        Int16Array: "off",
        Int32Array: "off",
        Int8Array: "off",
        Map: "off",
        Promise: "off",
        Proxy: "off",
        Reflect: "off",
        Set: "off",
        Symbol: "off",
        Uint16Array: "off",
        Uint32Array: "off",
        Uint8Array: "off",
        Uint8ClampedArray: "off",
        WeakMap: "off",
        WeakSet: "off",
        // es2017
        Atomics: "off",
        SharedArrayBuffer: "off",
        // es2020
        BigInt: "off",
        BigInt64Array: "off",
        BigUint64Array: "off",
        globalThis: "off",
        // es2021
        AggregateError: "readonly",
        FinalizationRegistry: "off",
        WeakRef: "off",
        // Rune globals
        Rune: "readonly",
    },
    rules: {
        "no-undef": 2,
        "no-global-assign": 2,
        "no-extend-native": 2,
        "no-var": 1,
        "no-restricted-properties": [
            2,
            {
                object: "Rune",
                property: "init",
                message: "Rune.init() is restricted to client-only code.",
            },
            {
                object: "Rune",
                property: "initClient",
                message: "Rune.init() is restricted to client-only code.",
            },
            {
                object: "Rune",
                property: "deterministicRandom",
                message: "Rune.init() is restricted to client-only code.",
            },
        ],
        "no-restricted-syntax": __spreadArray([
            "error",
            {
                selector: "ImportDeclaration,ExportNamedDeclaration[source],ExportAllDeclaration[source],ExportDefaultDeclaration[source]",
                message: "Rune logic must be contained in a single file.",
            }
        ], restrictedSyntaxBase, true),
        "rune/no-parent-scope-mutation": 2,
    },
};
var logicModuleConfig = __assign(__assign({}, logicConfig), { rules: __assign(__assign({}, logicConfig.rules), { "no-restricted-syntax": __spreadArray(["error"], restrictedSyntaxBase, true) }) });
exports.configs = {
    recommended: {
        globals: {
            Rune: true,
        },
        overrides: [
            __assign({ files: ["**/logic.js"] }, logicConfig),
            __assign({ files: ["**/logic/**/*.ts", "**/logic/**/*.js"] }, logicModuleConfig),
        ],
    },
    logic: logicConfig,
    logicModule: logicModuleConfig,
};
